package eg.edu.alexu.csd.datastructure.mailServer.cs01_cs30_cs35;

import eg.edu.alexu.csd.datastructure.linkedList.cs01_cs35.Node;

/**
 * @author Abanoub
 * @author Amr
 * @author Kiro
 */

import eg.edu.alexu.csd.datastructure.linkedList.cs01_cs35.DoubleLinkedList;
import eg.edu.alexu.csd.datastructure.mailServer.IPriorityQueue;

class PQNode {
	int key;
	Object value;

	PQNode(int k, Object v) {
		key = k;
		value = v;
	}
}

public class MyPriorityQueue implements IPriorityQueue {

	/**
	 * thePriorityQueue.
	 */
	DoubleLinkedList PQueue = new DoubleLinkedList();

	@Override
	public void insert(final Object item, final int key) {
		if (key <= 0 || item == null) {
			throw new RuntimeException();
		}
		PQNode newNode = new PQNode(key, item);
		if (PQueue.size() == 0) {
			PQueue.add(newNode);
			return;
		}
		Node temp1 = PQueue.header.getNext();
		Node temp2 = PQueue.tailer.getPrev();
		boolean added = false;
		int i = 0;
		int j = PQueue.size()-1;
		while (true) {
			if (((PQNode) temp1.getElement()).key > (int) newNode.key) {
				added = true;
				PQueue.add(i, newNode);
				break;
			} else {
				temp1 = temp1.getNext();
			}
			if (((PQNode) temp2.getElement()).key <= (int) newNode.key) {
				added = true;
				PQueue.add(j + 1, newNode);
				break;
			} else {
				temp2 = temp2.getPrev();
			}
			i++;
			j--;
		}
		if (!added) {
			PQueue.add(PQueue.size(), newNode);
		}
	}

	@Override
	public Object removeMin() {
		if (PQueue.size() == 0) {
			throw new RuntimeException();
		}
		Object min = ((PQNode) PQueue.get(0)).value;
		PQueue.remove(0);
		return min;
	}

	@Override
	public Object min() {
		if (PQueue.isEmpty()) {
			throw new RuntimeException();
		}
		return ((PQNode) PQueue.get(0)).value;
	}

	@Override
	public boolean isEmpty() {
		return PQueue.size() == 0;
	}

	@Override
	public int size() {
		return PQueue.size();
	}

}